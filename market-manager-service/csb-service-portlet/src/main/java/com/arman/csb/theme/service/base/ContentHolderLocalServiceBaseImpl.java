package com.arman.csb.theme.service.base;

import com.arman.csb.theme.model.ContentHolder;
import com.arman.csb.theme.service.ContentHolderLocalService;
import com.arman.csb.theme.service.persistence.ContentHolderPersistence;
import com.arman.csb.theme.service.persistence.TemplatePersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the content holder local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.arman.csb.theme.service.impl.ContentHolderLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.arman.csb.theme.service.impl.ContentHolderLocalServiceImpl
 * @see com.arman.csb.theme.service.ContentHolderLocalServiceUtil
 * @generated
 */
public abstract class ContentHolderLocalServiceBaseImpl
    extends BaseLocalServiceImpl implements ContentHolderLocalService,
        IdentifiableBean {
    @BeanReference(type = com.arman.csb.theme.service.ContentHolderLocalService.class)
    protected com.arman.csb.theme.service.ContentHolderLocalService contentHolderLocalService;
    @BeanReference(type = com.arman.csb.theme.service.ContentHolderService.class)
    protected com.arman.csb.theme.service.ContentHolderService contentHolderService;
    @BeanReference(type = ContentHolderPersistence.class)
    protected ContentHolderPersistence contentHolderPersistence;
    @BeanReference(type = com.arman.csb.theme.service.MyPageLocalService.class)
    protected com.arman.csb.theme.service.MyPageLocalService myPageLocalService;
    @BeanReference(type = com.arman.csb.theme.service.MyPageService.class)
    protected com.arman.csb.theme.service.MyPageService myPageService;
    @BeanReference(type = com.arman.csb.theme.service.TemplateLocalService.class)
    protected com.arman.csb.theme.service.TemplateLocalService templateLocalService;
    @BeanReference(type = com.arman.csb.theme.service.TemplateService.class)
    protected com.arman.csb.theme.service.TemplateService templateService;
    @BeanReference(type = TemplatePersistence.class)
    protected TemplatePersistence templatePersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private ContentHolderLocalServiceClpInvoker _clpInvoker = new ContentHolderLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link com.arman.csb.theme.service.ContentHolderLocalServiceUtil} to access the content holder local service.
     */

    /**
     * Adds the content holder to the database. Also notifies the appropriate model listeners.
     *
     * @param contentHolder the content holder
     * @return the content holder that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public ContentHolder addContentHolder(ContentHolder contentHolder)
        throws SystemException {
        contentHolder.setNew(true);

        return contentHolderPersistence.update(contentHolder);
    }

    /**
     * Creates a new content holder with the primary key. Does not add the content holder to the database.
     *
     * @param id the primary key for the new content holder
     * @return the new content holder
     */
    @Override
    public ContentHolder createContentHolder(long id) {
        return contentHolderPersistence.create(id);
    }

    /**
     * Deletes the content holder with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param id the primary key of the content holder
     * @return the content holder that was removed
     * @throws PortalException if a content holder with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public ContentHolder deleteContentHolder(long id)
        throws PortalException, SystemException {
        return contentHolderPersistence.remove(id);
    }

    /**
     * Deletes the content holder from the database. Also notifies the appropriate model listeners.
     *
     * @param contentHolder the content holder
     * @return the content holder that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public ContentHolder deleteContentHolder(ContentHolder contentHolder)
        throws SystemException {
        return contentHolderPersistence.remove(contentHolder);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(ContentHolder.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return contentHolderPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.arman.csb.theme.model.impl.ContentHolderModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return contentHolderPersistence.findWithDynamicQuery(dynamicQuery,
            start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.arman.csb.theme.model.impl.ContentHolderModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return contentHolderPersistence.findWithDynamicQuery(dynamicQuery,
            start, end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return contentHolderPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return contentHolderPersistence.countWithDynamicQuery(dynamicQuery,
            projection);
    }

    @Override
    public ContentHolder fetchContentHolder(long id) throws SystemException {
        return contentHolderPersistence.fetchByPrimaryKey(id);
    }

    /**
     * Returns the content holder with the matching UUID and company.
     *
     * @param uuid the content holder's UUID
     * @param  companyId the primary key of the company
     * @return the matching content holder, or <code>null</code> if a matching content holder could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public ContentHolder fetchContentHolderByUuidAndCompanyId(String uuid,
        long companyId) throws SystemException {
        return contentHolderPersistence.fetchByUuid_C_First(uuid, companyId,
            null);
    }

    /**
     * Returns the content holder matching the UUID and group.
     *
     * @param uuid the content holder's UUID
     * @param groupId the primary key of the group
     * @return the matching content holder, or <code>null</code> if a matching content holder could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public ContentHolder fetchContentHolderByUuidAndGroupId(String uuid,
        long groupId) throws SystemException {
        return contentHolderPersistence.fetchByUUID_G(uuid, groupId);
    }

    /**
     * Returns the content holder with the primary key.
     *
     * @param id the primary key of the content holder
     * @return the content holder
     * @throws PortalException if a content holder with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public ContentHolder getContentHolder(long id)
        throws PortalException, SystemException {
        return contentHolderPersistence.findByPrimaryKey(id);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return contentHolderPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns the content holder with the matching UUID and company.
     *
     * @param uuid the content holder's UUID
     * @param  companyId the primary key of the company
     * @return the matching content holder
     * @throws PortalException if a matching content holder could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public ContentHolder getContentHolderByUuidAndCompanyId(String uuid,
        long companyId) throws PortalException, SystemException {
        return contentHolderPersistence.findByUuid_C_First(uuid, companyId, null);
    }

    /**
     * Returns the content holder matching the UUID and group.
     *
     * @param uuid the content holder's UUID
     * @param groupId the primary key of the group
     * @return the matching content holder
     * @throws PortalException if a matching content holder could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public ContentHolder getContentHolderByUuidAndGroupId(String uuid,
        long groupId) throws PortalException, SystemException {
        return contentHolderPersistence.findByUUID_G(uuid, groupId);
    }

    /**
     * Returns a range of all the content holders.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.arman.csb.theme.model.impl.ContentHolderModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of content holders
     * @param end the upper bound of the range of content holders (not inclusive)
     * @return the range of content holders
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<ContentHolder> getContentHolders(int start, int end)
        throws SystemException {
        return contentHolderPersistence.findAll(start, end);
    }

    /**
     * Returns the number of content holders.
     *
     * @return the number of content holders
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getContentHoldersCount() throws SystemException {
        return contentHolderPersistence.countAll();
    }

    /**
     * Updates the content holder in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param contentHolder the content holder
     * @return the content holder that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public ContentHolder updateContentHolder(ContentHolder contentHolder)
        throws SystemException {
        return contentHolderPersistence.update(contentHolder);
    }

    /**
     * Returns the content holder local service.
     *
     * @return the content holder local service
     */
    public com.arman.csb.theme.service.ContentHolderLocalService getContentHolderLocalService() {
        return contentHolderLocalService;
    }

    /**
     * Sets the content holder local service.
     *
     * @param contentHolderLocalService the content holder local service
     */
    public void setContentHolderLocalService(
        com.arman.csb.theme.service.ContentHolderLocalService contentHolderLocalService) {
        this.contentHolderLocalService = contentHolderLocalService;
    }

    /**
     * Returns the content holder remote service.
     *
     * @return the content holder remote service
     */
    public com.arman.csb.theme.service.ContentHolderService getContentHolderService() {
        return contentHolderService;
    }

    /**
     * Sets the content holder remote service.
     *
     * @param contentHolderService the content holder remote service
     */
    public void setContentHolderService(
        com.arman.csb.theme.service.ContentHolderService contentHolderService) {
        this.contentHolderService = contentHolderService;
    }

    /**
     * Returns the content holder persistence.
     *
     * @return the content holder persistence
     */
    public ContentHolderPersistence getContentHolderPersistence() {
        return contentHolderPersistence;
    }

    /**
     * Sets the content holder persistence.
     *
     * @param contentHolderPersistence the content holder persistence
     */
    public void setContentHolderPersistence(
        ContentHolderPersistence contentHolderPersistence) {
        this.contentHolderPersistence = contentHolderPersistence;
    }

    /**
     * Returns the my page local service.
     *
     * @return the my page local service
     */
    public com.arman.csb.theme.service.MyPageLocalService getMyPageLocalService() {
        return myPageLocalService;
    }

    /**
     * Sets the my page local service.
     *
     * @param myPageLocalService the my page local service
     */
    public void setMyPageLocalService(
        com.arman.csb.theme.service.MyPageLocalService myPageLocalService) {
        this.myPageLocalService = myPageLocalService;
    }

    /**
     * Returns the my page remote service.
     *
     * @return the my page remote service
     */
    public com.arman.csb.theme.service.MyPageService getMyPageService() {
        return myPageService;
    }

    /**
     * Sets the my page remote service.
     *
     * @param myPageService the my page remote service
     */
    public void setMyPageService(
        com.arman.csb.theme.service.MyPageService myPageService) {
        this.myPageService = myPageService;
    }

    /**
     * Returns the template local service.
     *
     * @return the template local service
     */
    public com.arman.csb.theme.service.TemplateLocalService getTemplateLocalService() {
        return templateLocalService;
    }

    /**
     * Sets the template local service.
     *
     * @param templateLocalService the template local service
     */
    public void setTemplateLocalService(
        com.arman.csb.theme.service.TemplateLocalService templateLocalService) {
        this.templateLocalService = templateLocalService;
    }

    /**
     * Returns the template remote service.
     *
     * @return the template remote service
     */
    public com.arman.csb.theme.service.TemplateService getTemplateService() {
        return templateService;
    }

    /**
     * Sets the template remote service.
     *
     * @param templateService the template remote service
     */
    public void setTemplateService(
        com.arman.csb.theme.service.TemplateService templateService) {
        this.templateService = templateService;
    }

    /**
     * Returns the template persistence.
     *
     * @return the template persistence
     */
    public TemplatePersistence getTemplatePersistence() {
        return templatePersistence;
    }

    /**
     * Sets the template persistence.
     *
     * @param templatePersistence the template persistence
     */
    public void setTemplatePersistence(TemplatePersistence templatePersistence) {
        this.templatePersistence = templatePersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("com.arman.csb.theme.model.ContentHolder",
            contentHolderLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "com.arman.csb.theme.model.ContentHolder");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return ContentHolder.class;
    }

    protected String getModelClassName() {
        return ContentHolder.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = contentHolderPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
